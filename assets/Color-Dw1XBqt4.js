import{S as x,r as C,v as b,L as _,z as y,c as a,B as z,H as B,w as H,W as L,l as P}from"./three.module-B9tCJV9l.js";import{O as W}from"./OrbitControls-tDbgpgFB.js";import{r as E,o as S,f as k,c as M,a as A}from"./index-ClFDabME.js";const O={__name:"Color",setup(F){let t=new x,n=new C(90,window.innerWidth/window.innerHeight,.1,1e5);n.position.set(0,2,2),n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),t.add(n);let m=new b(5);t.add(m);const u=new _({linewidth:2,vertexColors:!0});let l=new y(new a(10,10,0),new a(-10,-10,0),new a(5,-10,0));console.log(l,"cccccc");let r=l.getPoints(3);console.log(r,"pppppp");let h=[];r.forEach(o=>{h.push(o.x,o.y,o.z)});const i=new z().setFromPoints(r);let g=[1,0,0,0,1,0,0,0,1,1,1,0],s=new B(g,3);console.log(s,"coll"),i.setAttribute("color",s),console.log(i,"geometrygeometry");const f=new H(i,u);t.add(f);let e=new L;e.setSize(window.innerWidth,window.innerHeight),e.shadowMap.enabled=!0,e.physicallyCorrectLights=!0,e.setClearColor(13421772,1);let c=()=>{n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),e.setSize(window.innerWidth,window.innerHeight),e.setPixelRatio(window.devicePixelRatio)};window.addEventListener("resize",c);let d=new W(n,e.domElement);d.enableDamping=!0;let v=new P,w=()=>{v.getDelta(),d.update(),requestAnimationFrame(w),e.render(t,n)};w();let p=E(null);return S(()=>{p.value.appendChild(e.domElement)}),k(()=>{window.removeEventListener("resize",c)}),(o,R)=>(A(),M("div",{id:"bone",ref_key:"boneScene",ref:p},null,512))}};export{O as default};
